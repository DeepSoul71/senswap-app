import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { withRouter } from 'react-router-dom';
import ssjs from 'senswapjs';

import { withStyles } from '@material-ui/core/styles';
import Grid from '@material-ui/core/Grid';
import TextField from '@material-ui/core/TextField';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import CircularProgress from '@material-ui/core/CircularProgress';

import { HelpOutlineRounded } from '@material-ui/icons';

import styles from './styles';
import { setError } from 'modules/ui.reducer';

const EMPTY = {
  loading: false,
}

class MintAddress extends Component {
  constructor() {
    super();

    this.state = {
      ...EMPTY,
      prefix: '',
      address: '',
    }
  }

  componentDidMount() {
    this.onAddress();
  }

  onAddress = () => {
    const { prefix } = this.state;
    const { setError, onChange } = this.props;
    if (this.cancel) this.cancel();
    return this.setState({ loading: true }, () => {
      onChange(null); // Clear previous address
      return ssjs.createPrefixedAccount(prefix, (address, cancel) => {
        this.cancel = cancel;
        return this.setState({ address });
      }).then(account => {
        const address = account.publicKey.toBase58();
        const secretKey = Buffer(account.secretKey).toString('hex');
        return this.setState({ ...EMPTY, address }, () => {
          return onChange(secretKey);
        });
      }).catch(er => {
        return setError(er);
      });
    });
  }

  onPrefix = (e) => {
    const prefix = e.target.value || '';
    if (prefix.length > 3) return;
    return this.setState({ prefix, ...EMPTY }, this.onAddress);
  }

  render() {
    // const { classes } = this.props;
    const { loading, prefix, address } = this.state;

    return <Grid container spacing={2}>
      <Grid item xs={12}>
        <TextField
          label="Symbol"
          variant="outlined"
          value={prefix}
          onChange={this.onPrefix}
          InputProps={{
            startAdornment: <Tooltip title="The token address will be randomly generated by default. However if the symbol is provided, the system will find an address with the prefix same as symbol.">
              <IconButton edge="start">
                <HelpOutlineRounded fontSize="small" />
              </IconButton>
            </Tooltip>,
            endAdornment: loading ? <IconButton edge="end">
              <CircularProgress size={17} />
            </IconButton> : null
          }}
          helperText={address}
          fullWidth
        />
      </Grid>
    </Grid>
  }
}

const mapStateToProps = state => ({
  ui: state.ui,
});

const mapDispatchToProps = dispatch => bindActionCreators({
  setError,
}, dispatch);

MintAddress.defaultProps = {
  onChange: () => { },
}

MintAddress.propTypes = {
  onChange: PropTypes.func,
}

export default withRouter(connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(styles)(MintAddress)));