import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { withRouter } from 'react-router-dom';
import ssjs from 'senswapjs';

import { withStyles } from 'senswap-ui/styles';
import Grid from 'senswap-ui/grid';
import { IconButton } from 'senswap-ui/button';
import Tooltip from 'senswap-ui/tooltip';
import TextField from 'senswap-ui/textField';

import { HelpOutlineRounded } from 'senswap-ui/icons';

import styles from './styles';
import { setError } from 'modules/ui.reducer';


class MintAddress extends Component {
  constructor() {
    super();

    this.state = {
      prefix: '',
      address: '',
      secretKey: '',
    }
  }

  componentDidMount() {
    this.onAddress();
  }

  componentWillUnmount() {
    if (this.cancel) this.cancel();
  }

  onAddress = () => {
    const { prefix } = this.state;
    const { setError, onChange } = this.props;
    if (this.cancel) this.cancel();
    onChange(null); // Clear previous address
    return ssjs.createPrefixedAccount(prefix, (address, cancel) => {
      this.cancel = cancel;
      return this.setState({ address });
    }).then(account => {
      const address = account.publicKey.toBase58();
      const secretKey = Buffer(account.secretKey).toString('hex');
      return this.setState({ address, secretKey }, () => {
        return onChange(secretKey);
      });
    }).catch(er => {
      return setError(er);
    });
  }

  onPrefix = (e) => {
    const prefix = e.target.value || '';
    if (prefix.length > 3) return;
    return this.setState({ prefix }, this.onAddress);
  }

  onSecretKey = (e) => {
    const secretKey = e.target.value || '';
    const { onChange } = this.props;
    const account = ssjs.fromSecretKey(secretKey);
    const address = account ? account.publicKey.toBase58() : 'Invalid secret key';
    return this.setState({ address, secretKey }, () => {
      return onChange(secretKey);
    });
  }

  render() {
    // const { classes } = this.props;
    const { prefix, address, secretKey } = this.state;

    return <Grid container spacing={2}>
      <Grid item xs={4}>
        <TextField
          label="Symbol"
          variant="outlined"
          value={prefix}
          onChange={this.onPrefix}
          InputProps={{
            endAdornment: <Tooltip title="The token address will be randomly generated by default. However if the symbol is provided, the system will find an address with the prefix as same as symbol.">
              <IconButton edge="end">
                <HelpOutlineRounded fontSize="small" />
              </IconButton>
            </Tooltip>
          }}
          fullWidth
        />
      </Grid>
      <Grid item xs={8}>
        <TextField
          label="Address"
          variant="outlined"
          value={address}
          fullWidth
        />
      </Grid>
      <Grid item xs={12}>
        <TextField
          label="Secret Key"
          variant="outlined"
          onChange={this.onSecretKey}
          value={secretKey}
          fullWidth
        />
      </Grid>
    </Grid>
  }
}

const mapStateToProps = state => ({
  ui: state.ui,
});

const mapDispatchToProps = dispatch => bindActionCreators({
  setError,
}, dispatch);

MintAddress.defaultProps = {
  onChange: () => { },
}

MintAddress.propTypes = {
  onChange: PropTypes.func,
}

export default withRouter(connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(styles)(MintAddress)));